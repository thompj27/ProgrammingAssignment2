ver
version
1+
20
x=1+20
x
x<1+20
1+20->x
x<-1+20
a <- 1 + 20 +
1
a
ls.str()
library("ggplot2", lib.loc="C:/Program Files/R/R-2.15.3/library")
eval (parse(text="x<-1+20"))
x
eval (parse(text="x<-1+40"))
x<-matrix(1:10)
x<-matrix(1:10, nrow=2)
x
x[2,3]
x[2,]
x[2,, drop=FALSE]
version()
version
exit()
quit()
cd e:\
q()
version
install.packages(c("foreign", "gtools", "Hmisc", "jpeg", "matrixStats", "mvtnorm", "R.methodsS3", "R.oo", "RcppArmadillo", "sfsmisc", "survival", "WriteXLS"))
exit
quit()
x = 1
print(x)
x
msg <- "hello"
msg
x <- 1;20
X <- 1:20
x
x <- 1:20
x
x <- c(1.7, "a")
x
y <- (TRUE, 2)
y <- c(TRUE, 2)
y
#as operator
as.logical(x)
as.numeric(x)
as.complex(x)
x
m <- matrix(nrow=2, ncol=3)
m
dim(m)
d <- dim(m)
d
d(1)
d[1]
m<-matrix(1:6, nrow=2, ncol=3)
m
#cbind and rbind to create matrix
x <- 1:3
help cbind
cbind
help(cbind)
x <- (1:20)
x[1]
x[2]
x[;1:4]
x[1:4]
b <- x>10
x[b]
#logical index
#matrix subset
s <- matrix(1:6,2,3)
s
s[1,2]
s[2,1]
s
s[1,]
s[,2]
#single cell returns as a vector of one
x[1,2,drop=false]
x[1,2,drop=FALSE]
x[1,2,drop=FALSE]
s[1,2,drop=FALSE]
#drop=FALSE return a 1 by 1 matrix
x <-  list(foo=1:4, bar=0.6)
x
#x is a list with 2 element
x[1]
x[[1]]
x$bar
x[1]
x[[1]]
name = "foo"
x[[name]]
#  $ is literal; use computed variable in double brackets
#partial matching
x
x$f
x[[f]]
c[["f"]]
x[["f"]]
x[["f", exact=FALSE]]
x$a
x$b
#removing NA
x <- c(1, 2, NA, 4, NA, 5)
x
#logical vector
bad = <- is.na(x)
bad <- is.na(x)
x[!bad]
#  ! represent NOT
bad
good <- x[!bad]
good
x <- matrix(1:6,2,3)
x
x[2,2]<- NA
s
#remove NA containg rows
good <- complete.cases(variable)
help(read.table)
update.packages(checkBuilt=TRUE, ask=FALSE)
misc = list(toes=c(1,2,3), friends=c("alice","bob", "sally"), age=c(27,32,17))
misc$toes
misc[toes]
misc["toes"]
misc[["toes"]]
misc["toes"][2]
misc[["toes"][2]
misc[["toes"]][2]
misc$toes[2]
misc[["friends"]][2]
misc$"friends"[2]
str(misc)
mylogical = c(FALSE, TRUE)
as.integer(mylogical)
x = c(1, 2, na, 3)
x = c(1, 2, NA, 3)
x
is.na(x)
x = rnorm(1000)
y=x + rnorm(1000, sd=.5)  #add some jitter
df = data.frame(X-x, Y=y)
>df = data.frame(X-x, Y=y)
df = data.frame(X-x, Y=y)
result = anova(fit)
result = anova(fit)
fit = lm(Y ~ X, df)
df = data.frame(X-x, Y=y)
fit = lm(Y ~ X, df)
View(df)
df = data.frame(X=x, Y=y)
fit = lm(Y ~ X, df)
methods(fit)
methods(lm)
library(GenomicRanges)
data(cpgIslands)
library(Gviz)
library(Gviz)
library(GViz)
library(Givz)
library(gViz)
library(Gviz)
source("http://bioconductor.org/biocLite.R")
biocLite("Gviz")
biocLite("Gviz")
detectCores()
rm()
rm("*")
rm()
rm(list = ls())
update
update("Iranges")
update("IRanges")
biocLite("IRanges")
update("IRanges")
biocLite("IRanges")
library(installr)
library("installr")
library("installr")
New.R.Runme()
New.R.RunMe()
update.packages(ask=FALSE, checkBuilt = TRUE)
#Get currently installed packages
package_df <- as.data.frame(installed.packages("C:\Program Files\R\R-3.1.2\library"))
package_list <- as.character(package_df$Package)
package_df <- as.data.frame(installed.packages("C:\Program Files\R\R-3.1.2\library"))
package_df <- as.data.frame(installed.packages("C:\\Program Files\\R\\R-3.1.2\\library"))
#Re-install Install packages
install.packages(package_list)
package_list <- as.character(package_df$Package)
#Re-install Install packages
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
install.packages(package_list)
source("http://bioconductor.org/biocLite.R")
biocLite("seqc")
?Biocupgrade
??Biocupgrade
biocLite("BiocUpgrade")
lsa()
lsa
lsa()
lsa()
lsa()
lsa()
setwd("~/")
getwd()
.env
.env$n <- function(df) matrix(names(df))
traceback()
source("C:/Users/jrt/Documents/.Rprofile")
source("C:/Users/jrt/Documents/.Rprofile")
source("C:/Users/jrt/Documents/.Rprofile")
interactive()
search()
source(".Rprofile")
source(".Rprofile")
install.packages(c("plyr", "robustbase", "scales", "shiny", "survival"))
Sys.which("pdflatex")
source("http://bioconductor.org/biocLite.R")
install.packages("devtools")
biocLite("limma")
install.packages(c("cluster", "foreign", "MASS", "stringi", "survival"))
biocLite("limma")
biocLite("limma")
biocLite("ShortRead")
biocLite("ShortRead")
install.packages("stringi")
install.packages("foreign")
biocLite("Rsubread")
install.packages(c("foreign", "nlme"))
install.packages("fortunes")
fortunes::fortune()
cat("JRT Profile Loaded from: C:\\Program Files\\R\\R-3.2.2\\etc\\Rprofile.site")
.First()
install.packages(c("data.table", "devtools", "evaluate", "formatR", "highr", "installr", "Rcpp", "rgl", "tidyr", "VennDiagram"))
install.packages(c("data.table", "devtools", "evaluate", "formatR",
)
"")
biocLite()
biocLite()
biocLite (c("openxlsx",
"org.Hs.eg.db",
"org.Mm.eg.db",
"org.Rn.eg.db",
"gdata",
"dplyr",
"GenomicRanges",
"SummarizedExperiment",
"edgeR",
"limma",
"magrittr",
"reshape2",
"ggplot2",
"tidyr",
"stringr",
"qvalue",
"locfit"
), suppressUpdates=TRUE)
biocLite("ggplot2")
install.packages("~/R/lib/zFPKM_0.0.0.9000.tar.gz", repos=NULL, type="source")
install.packages("~/R/lib/DGE.Tools_0.0.0.9000.tar.gz", repos=NULL, type="source")
biocLite("reshape2")
install.packages("~/R/lib/zFPKM_0.0.0.9000.tar.gz", repos=NULL, type="source")
library(zFPKM)
remove.packages("reshape2")
install.packages(reshape2)
install.packages("reshape2")
install.packages("reshape2")
biocLite("ggplot2")
biocLite("BiocInstaller", suppressUpdates=TRUE)
biocLite("BiocInstaller", suppressUpdates=TRUE)
biocLite (c("openxlsx",
"org.Hs.eg.db",
"org.Mm.eg.db",
"org.Rn.eg.db",
"gdata",
"dplyr",
"GenomicRanges",
"SummarizedExperiment",
"edgeR",
"limma",
"magrittr",
"reshape2",
"ggplot2",
"tidyr",
"stringr",
"qvalue",
"locfit"
), suppressUpdates=TRUE)
library(ggplot2)
install.packages("~/R/lib/zFPKM_0.0.0.9000.tar.gz", repos=NULL, type="source")
install.packages("~/R/lib/DGE.Tools_0.0.0.9000.tar.gz", repos=NULL, type="source")
library(DGE.Tools)
library(reshape2)
remove.packages("reshape2")
biocLite("reshape2")
library("DESeq", lib.loc="C:/Program Files/R/R-3.2.2/library")
detach("package:DESeq", unload=TRUE)
cube=function(x,n){x^3}
cube(3)
x = 1:10
if(x < 5){ x = 0}
library(datasets)
data(iris)
names(iris)
v = filter(iris, Species == "virginica")
View(iris)
v = filter(iris, Species == "virginica"
v = filter(iris, Species == "virginica")
?fifilter
?filter
v = filter(iris, Species = "virginica")
library(dplyr)
v = filter(iris, Species = "virginica")
v = filter(iris, Species == "virginica")
slmean = mean(v$Sepal.Length, na.rm=T)
slmean
mean(v$Sepal.Length)
library(datasets)
data(mtcars)
?mtcars
ls(mtcars)
head(mtcars)
View(mtcars)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
x = sapply(split(mtcars$hp, mtcars$cyl), mean)
x[1] - x[4]
x[1] - x[3]
x
debug(ls)
ls ()
library(datasets)
data(iris)
library(dplyr)
v = filter(iris, Species == "virginica")
slmean = mean(v$Sepal.Length, na.rm=T)
slmean
mean(v$Sepal.Length)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
colMeans(iris)
with(mtcars, tapply(mpg, cyl, mean))
data(mtcars)
?mtcars
#How can one calculate the average miles per gallon (mpg) by number of cylinders in the car (cyl)?
#what is the absolute difference between the average horsepower of 4-cylinder cars and the average horsepower of 8-cylinder cars?
#
x = sapply(split(mtcars$hp, mtcars$cyl), mean)
x
x[1] - x[3]
library(datasets)
data(iris)
library(dplyr)
v = filter(iris, Species == "virginica")
slmean = mean(v$Sepal.Length, na.rm=T)
slmean
mean(v$Sepal.Length)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
library(qvalue)
?qvalue
source('~/.active-rstudio-document', echo=TRUE)
x = rnorm()
x = rnorm(100)
makeVector(x)
y = makeVector(s)
y$set()
source('~/.active-rstudio-document', echo=TRUE)
myx = rnorm(100)
z = cachemean(myx)
a = makeVector(myx)
ca
a = makeVector(myx)
b = cachemean(a)
mean(myx)
setwd("~/GitHub/ProgrammingAssignment2")
?<<-
x = 1:10
m = rbind(rep(m, 10))
m = rbind(rep(x, 10))
m
x = 1:3
m = rbind(x,x,x)
m
solve9x)
solve(x)
solve(m)
class(m)
rownames(x) = c("x", "y", "z")
m = rbind(x,x,x) %>% as.matrix()
library(magrittr)
m = rbind(x,x,x) %>% as.matrix()
m
solve(m)
dim(m)
m = matrix(1:9, nrow=3, ncol=3)
m
solve(m)
?solve
?solve
?solve
library(magrittr)
m
?solve
solve(m)
is.square
n = solve(m)
n = t(m)
n
m
k   <- 10
rho <- .3
S       <- matrix(rep(rho, k*k), nrow=k)
diag(S) <- 1
dat <- mvrnorm(10, mu=rep(0,k), Sigma=S) ### be patient!
R <- cor(dat)
library(MASS)
library(MASS)
k   <- 10
rho <- .3
S       <- matrix(rep(rho, k*k), nrow=k)
diag(S) <- 1
dat <- mvrnorm(10, mu=rep(0,k), Sigma=S) ### be patient!
R <- cor(dat)
R
solve(R)
